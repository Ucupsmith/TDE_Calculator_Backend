generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId             Int                 @id @default(autoincrement()) @map("user_id")
  username           String              @db.VarChar(255)
  password           String              @db.VarChar(255)
  email              String              @db.VarChar(255)
  reset_token        String?             @db.VarChar(40)
  reset_token_expiry DateTime?           @db.DateTime(0)
  number_phone       String              @db.VarChar(20)
  mealPlans          MealPlan[]
  tdeeCalculations   TdeeCalculation[]
  profile            Profile?
  userMealSelections UserMealSelection[]
  dailyMealHistory   DailyMealHistory[]

  @@map("users")
}

model TdeeCalculation {
  tdeeId         Int           @id @default(autoincrement()) @map("tdee_id")
  userId         Int           @map("user_id")
  goal           Goal          @map("goal")
  tdee_result    Decimal       @map("tdee_result")
  activity_level ActivityLevel
  age            Int
  gender         Gender
  height         Decimal       @db.Decimal(8, 2)
  saved_id       Int           @map("saved_id")
  weight         Decimal       @db.Decimal(8, 2)
  createdAt      DateTime      @default(now()) @map("created_at")

  user               User                @relation(fields: [userId], references: [userId])
  mealPlan           MealPlan[]
  savedprofile       savedprofile[]
  userMealSelections UserMealSelection[]
  dailyMealHistory   DailyMealHistory[]

  @@map("tdee_calculations")
}

model Profile {
  profileId    Int            @id @default(autoincrement()) @map("profile_id")
  userId       Int            @unique @map("user_id")
  full_name    String?        @db.VarChar(255)
  birth_date   DateTime?      @db.DateTime(0)
  birth_place  String?        @db.VarChar(255)
  address      String?        @db.VarChar(255)
  phone_number String         @db.VarChar(12)
  email        String         @db.VarChar(255)
  avatar       String?
  gender       Gender?
  mealPlan     MealPlan[]
  notification notification[]
  user         User           @relation(fields: [userId], references: [userId])
  savedprofile savedprofile[]

  @@map("profiles")
}

model Admin {
  adminId            Int                  @id @default(autoincrement()) @map("admin_id")
  admin_name         String               @db.VarChar(255)
  email              String               @db.VarChar(255)
  password           Int
  articles           Article[]            @relation("ArticleToAdmin")
  createnotification createnotification[]
  mealPlans          MealPlan[]

  @@map("admins")
}

model MealPlan {
  userId          Int             @map("user_id")
  adminId         Int             @map("admin_id")
  tdeeId          Int             @map("tdee_id")
  profileId       Int             @map("profile_id")
  goal            Goal            @map("goal")
  meal_detail     String?         @map("meal_details")
  breakfast       String          @db.VarChar(255)
  lunch           String          @db.VarChar(255)
  dinner          String          @db.VarChar(255)
  vegan           String          @db.VarChar(255)
  glutten_free    String          @db.VarChar(255)
  low_carb        String          @db.VarChar(255)
  meal_plans      Int             @id @default(autoincrement())
  admin           Admin           @relation(fields: [adminId], references: [adminId])
  profile         Profile         @relation(fields: [profileId], references: [profileId])
  tdeeCalculation TdeeCalculation @relation(fields: [tdeeId], references: [tdeeId])
  user            User            @relation(fields: [userId], references: [userId])

  @@index([adminId], map: "meal_plans_admin_id_fkey")
  @@index([profileId], map: "meal_plans_profile_id_fkey")
  @@index([tdeeId], map: "meal_plans_tdee_id_fkey")
  @@index([userId], map: "meal_plans_user_id_fkey")
  @@map("meal_plans")
}

model Article {
  article_id Int      @id @default(autoincrement()) @map("article_id")
  title      String   @db.VarChar(255)
  content    String   @db.Text
  image_path String?  @db.VarChar(255)
  category   String   @db.VarChar(255)
  author_id  Int      @map("author_id")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
  status     Status   @default(Pending)
  views      Int      @default(0)
  likes      Int      @default(0)
  author     Admin    @relation("ArticleToAdmin", fields: [author_id], references: [adminId])

  @@index([author_id], map: "articles_author_id_fkey")
  @@map("articles")
}

model Menu {
  menuId      Int      @id @default(autoincrement()) @map("menu_id")
  name        String   @db.VarChar(255)
  calories    Int
  price       Decimal  @db.Decimal(10, 2)
  description String   @db.Text
  category    String   @db.VarChar(50)
  image_path  String?  @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @map("updated_at")

  @@map("menus")
}

model UserMealSelection {
  selectionId       Int             @id @default(autoincrement()) @map("selection_id")
  userId            Int             @map("user_id")
  tdeeId            Int             @map("tdee_id")
  selectedFoods     String          @db.Text // Store JSON string of selected foods
  totalCalories     Float
  remainingCalories Float
  selected_date     DateTime        @default(now())
  meal_type         String          @default("regular") @db.VarChar(50)
  tdeeCalculation   TdeeCalculation @relation(fields: [tdeeId], references: [tdeeId])
  user              User            @relation(fields: [userId], references: [userId])

  @@index([tdeeId], map: "user_meal_selections_tdee_id_fkey")
  @@index([userId], map: "user_meal_selections_user_id_fkey")
  @@map("user_meal_selections")
}

model createnotification {
  create_notification_id Int      @id @default(autoincrement())
  adminId                Int
  notification_content   String   @db.VarChar(255)
  notification_date      DateTime
  admins                 Admin    @relation(fields: [adminId], references: [adminId], map: "CreateNotification_adminId_fkey")

  @@index([adminId], map: "CreateNotification_adminId_fkey")
}

model notification {
  notification_id      Int      @id @default(autoincrement())
  profile_id           Int
  notification_content String   @db.VarChar(255)
  notification_date    DateTime @db.DateTime(0)
  profiles             Profile  @relation(fields: [profile_id], references: [profileId], map: "Notification_profile_id_fkey")

  @@index([profile_id], map: "Notification_profile_id_fkey")
}

model savedprofile {
  saved_id          Int                         @id @default(autoincrement())
  profile_id        Int
  tdee_id           Int
  tdee_result       Decimal
  bmi_score         Decimal                     @db.Decimal(8, 2)
  bmr_score         Decimal                     @db.Decimal(8, 2)
  gender            savedprofile_gender
  weight            Decimal                     @db.Decimal(8, 2)
  height            Decimal                     @db.Decimal(8, 2)
  age               Int
  activity_level    savedprofile_activity_level
  profiles          Profile                     @relation(fields: [profile_id], references: [profileId], map: "SavedProfile_profile_id_fkey")
  tdee_calculations TdeeCalculation             @relation(fields: [tdee_id], references: [tdeeId], map: "SavedProfile_tdee_id_fkey")

  @@index([profile_id], map: "SavedProfile_profile_id_fkey")
  @@index([tdee_id], map: "SavedProfile_tdee_id_fkey")
}

model food {
  id        Int      @id @default(autoincrement())
  name      String
  calories  Int
  unit      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime

  dailyMealFoodEntries DailyMealFoodEntry[] @relation("DailyMealFoodEntryToFood")
}

enum Gender {
  Male
  Female
}

enum ActivityLevel {
  Sedentary
  SlightlyActive
  ModeratelyActive
  VeryActive
}

enum Goal {
  LoseWeight     @map("Lose Weight")
  MaintainWeight @map("Maintain Weight")
  GainWeight     @map("Gain Weight")
}

enum savedprofile_gender {
  Male
  Female
}

enum savedprofile_activity_level {
  Sedentary
  SlightlyActive
  ModeratelyActive
  VeryActive
}

enum Status {
  Pending
  Published
  Rejected
}

model DailyMealHistory {
  id               Int                  @id @default(autoincrement())
  userId           Int
  user             User                 @relation(fields: [userId], references: [userId])
  tdeeId           Int
  tdee             TdeeCalculation      @relation(fields: [tdeeId], references: [tdeeId])
  date             DateTime             @default(now())
  totalCalories    Float
  calorieRemaining Float
  foods            DailyMealFoodEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model DailyMealFoodEntry {
  id             Int              @id @default(autoincrement())
  mealHistoryId  Int
  mealHistory    DailyMealHistory @relation(fields: [mealHistoryId], references: [id])
  foodId         Int? // Make foodId optional
  food           food?            @relation("DailyMealFoodEntryToFood", fields: [foodId], references: [id]) // Added explicit relation name
  quantity       Float
  isCustom       Boolean          @default(false) // Add flag for custom food
  customName     String? // Add field for custom food name
  customCalories Float? // Add field for custom food calories (per unit/quantity)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mealHistoryId])
  @@index([foodId])
}
